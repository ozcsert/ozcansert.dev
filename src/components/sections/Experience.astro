---
import Section from "../Section.astro";
import { work } from "@cv";
import { Icon } from "astro-icon/components";
---

<Section className={Astro.props.className} title="Experience">
  <ul class="flex flex-col">
    {
      work.map(
        ({
          name,

          startDate,

          endDate,

          position,

          summary,

          responsibilities,

          url,

          skills,

          location,

          location_type,
        }) => {
          const startYear = new Date(startDate).getFullYear();

          const endYear =
            endDate != null ? new Date(endDate).getFullYear() : "Present";

          return (
            <li class="relative print:py-2">
              <div
                data-expanded="false"
                class="expand-container group relative grid pb-1 transition-all sm:grid-cols-12 sm:gap-8 md:gap-6 lg:hover:!opacity-100 print:grid-cols-1 print:pb-0"
              >
                <header class="relative mt-1 text-xs font-semibold sm:col-span-2">
                  <time datetime={startDate} data-title={startDate}>
                    {startYear}
                  </time>{" "}
                  -
                  <time datetime={endDate} data-title={endDate}>
                    {endYear}
                  </time>
                </header>

                <div class="relative flex flex-col pb-6 before:absolute before:-ml-6 before:mt-2 before:h-full before:w-px before:bg-skin-muted sm:col-span-10 print:pb-0 print:before:hidden">
                  <div class="absolute mt-2 h-2 w-2 -translate-x-[1.71rem] rounded-full bg-skin-muted ring ring-skin-fill" />

                  <h3>
                    <div
                      class="group/link inline-flex items-center text-lg leading-tight focus-visible:text-amber-500 print:text-base"
                      aria-label={`${position} - ${name}`}
                    >
                      <span>
                        {position} <span>@</span>
                        {url ? (
                          <span class="group/link">
                            <a
                              class="text-skin-hue"
                              href={url}
                              title={`Ver ${name}`}
                              target="_blank"
                            >
                              {name}
                            </a>

                            <span class="inline-block text-skin-hue print:[&>svg]:hidden">
                              <Icon
                                name="ri:arrow-up-line"
                                class="ml-1 inline-block h-4 w-4 shrink-0 translate-y-px rotate-45 transition-transform group-hover/link:-translate-y-1 group-hover/link:translate-x-1 group-focus-visible/link:-translate-y-1 group-focus-visible/link:translate-x-1 motion-reduce:transition-none"
                                aria-hidden="true"
                              />
                            </span>
                          </span>
                        ) : (
                          <span>{name}</span>
                        )}
                      </span>
                    </div>
                  </h3>

                  {(location || location_type) && (
                    <div class="text-xs text-skin-muted">
                      {location} {location && location_type && "-"}{" "}
                      {location_type}
                    </div>
                  )}

                  <div class="mt-4 flex flex-col gap-4 text-sm print:text-xs">
                    {summary && (
                      <div class="flex flex-col gap-1">
                        <h4>Summary:</h4>

                        <ul class="flex list-disc flex-col gap-2 text-skin-muted [&>li]:ml-4">
                          {Array.isArray(summary) ? (
                            summary.map((item) => <li>{item}</li>)
                          ) : (
                            <li>{summary}</li>
                          )}
                        </ul>
                      </div>
                    )}

                    {responsibilities && (
                      <div class="relative flex h-16 flex-col gap-4 overflow-hidden duration-200 ease-out after:absolute after:bottom-0 after:h-12 after:w-full after:bg-gradient-to-t after:from-skin-hue after:content-[''] group-data-[expanded=true]:h-auto group-data-[expanded=true]:after:hidden dark:after:to-skin-hue/0 print:!h-auto print:gap-2 print:after:hidden">
                        {responsibilities && (
                          <div class="flex flex-col gap-1">
                            <h4>Responsibilities:</h4>

                            <ul class="flex list-disc flex-col gap-2 text-skin-muted [&>li]:ml-4">
                              {responsibilities.map((responsibility) => (
                                <li>{responsibility}</li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </div>
                    )}

                    <button class="group/more expand-button flex w-fit cursor-pointer items-center justify-center gap-1.5 text-xs text-skin-muted underline transition-all hover:text-skin-base">
                      <span class="expand-text">Show more</span>

                      <Icon
                        name="ri:arrow-up-s-line"
                        class="h-4 w-4 duration-200 ease-out group-hover/more:translate-y-0.5 group-data-[expanded=true]:rotate-180"
                        width={24}
                        height={24}
                      />
                    </button>

                    <ul
                      class="flex flex-wrap gap-2"
                      aria-label="Technologies used"
                    >
                      {skills &&
                        Object.entries(skills).map(([label, icon]) => (
                          <li class="flex items-center gap-1 rounded-md border border-solid border-skin-hue/20 bg-skin-button-accent/20 px-2 py-0.5 text-xs text-skin-hue backdrop-blur-sm print:border-none print:bg-transparent print:p-0 print:text-zinc-800">
                            {icon && (
                              <Icon name={icon} width={16} height={16} />
                            )}

                            <span>{label}</span>
                          </li>
                        ))}
                    </ul>
                  </div>
                </div>
              </div>
            </li>
          );
        },
      )
    }
  </ul>
</Section>
<script>
  const expandButton = document.querySelectorAll(".expand-button");

  expandButton.forEach((button) => {
    button.addEventListener("click", () => {
      const container = button.closest<HTMLElement>(".expand-container")!;
      container.dataset.expanded =
        container.dataset.expanded === "true" ? "false" : "true";
      const expandText = button.querySelector(".expand-text")!;
      expandText.innerHTML =
        container.dataset.expanded === "true" ? "Show less" : "Show more";
    });
  });
</script>

<style>
  li::marker {
    @apply text-skin-hue;
  }
</style>
